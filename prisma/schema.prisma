// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          String  @id @default(uuid())
  name        String
  email       String  @unique
  password    String
  image       String
  verified    Boolean @default(false)
  phoneNumber String
  role        String

  purchase Purchase[]

  post         Post[]
  like         Like[]
  comment      Comment[]
  examProgress ExamProgress[]
  userProgress UserProgress[]
  grade        Grade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Post {
  id          String    @id @default(uuid())
  title       String
  description String
  imageUrl    String?
  likes       Like[]
  comments    Comment[]

  postCategoryId String
  postCategory   PostCategory? @relation(fields: [postCategoryId], references: [id])

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postCategoryId])
}

model Like {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@index([postId])
}

model Comment {
  id       String  @id @unique @default(uuid())
  userId   String  @unique
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  content  String
  imageUrl String?

  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}

model PostCategory {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

model Course {
  id          String  @id @default(uuid())
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?  @default(1)
  isPublished Boolean @default(false)
  isGradual   Boolean @default(true)

  userId String

  isFree Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachemnt[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // @@fulltext([title])

  @@index([categoryId])
}

model Attachemnt {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)
  // this is for cloudinary upload
  videoSize   String?

  exam Exam?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Exam {
  id        String     @id @default(uuid())
  questions Question[]

  examProgress ExamProgress[]

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId])
}

model Question {
  id            String   @id @default(uuid())
  questionHead  String
  answers       String[]
  correctAnswer String
  examId        String
  Exam          Exam     @relation(fields: [examId], references: [id])

  @@index([examId])
}

model ExamProgress {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  examId String
  exam   Exam   @relation(fields: [examId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)
  grades      Grade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, examId])
  @@index([examId])
}

model Grade {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  grade     Int
  createdAt DateTime @default(now())

  examProgressId String
  examProgress   ExamProgress @relation(fields: [examProgressId], references: [id], onDelete: Cascade)
  updatedAt      DateTime     @updatedAt

  @@index([examProgressId])
}

model UserProgress {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id          String  @id @default(uuid())
  isActivated Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}
